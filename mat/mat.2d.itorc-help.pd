#N canvas 167 257 381 313 10;
#N canvas 443 106 450 300 header 0;
#X obj 3 3 cnv 18 18 18 empty empty mat.2d.itorc 2 8 0 14 -262144 -66577
0;
#X text 215 4 by Pierre Guillot - 2016;
#X coords 0 -1 1 1 365 20 2 2 2;
#X restore 6 6 pd header;
#X text 4 101 The first argument is the position index from the vector.
The second argument is the number of rows in the matrix and the third
argument is the number of column in the matrix.;
#X obj 133 243 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X obj 190 243 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X obj 133 185 mat.2d.itorc 6 4 4;
#X obj 13 185 mat.2d.itorc 0 4 4;
#X obj 133 207 unpack, f 10;
#X obj 13 243 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X obj 70 243 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X obj 13 207 unpack, f 10;
#X obj 253 243 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X obj 310 243 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X obj 253 207 unpack, f 10;
#X text 4 270 The result is a list containing the row index and a column
index inside the matrix.;
#X obj 253 185 mat.2d.itorc 14 5 4;
#X text 4 31 The abstraction transforms an index of a vector (the position
of an element inside a vector) into a row index and a column index
of a matrix (the position of an element inside a matrix) depending
on the total number of rows and columns in the matrix.;
#X obj 13 163 loadbang;
#X obj 133 163 loadbang;
#X obj 253 163 loadbang;
#X connect 4 0 6 0;
#X connect 5 0 9 0;
#X connect 6 0 2 0;
#X connect 6 1 3 0;
#X connect 9 0 7 0;
#X connect 9 1 8 0;
#X connect 12 0 10 0;
#X connect 12 1 11 0;
#X connect 14 0 12 0;
#X connect 16 0 5 0;
#X connect 17 0 4 0;
#X connect 18 0 14 0;
