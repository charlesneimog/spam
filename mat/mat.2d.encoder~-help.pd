#N struct 8426-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8424-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8422-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8420-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8418-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8416-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8414-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8412-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8410-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8408-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8406-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8404-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8402-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8400-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8398-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N struct 8396-t-scope float x1 float y1 float x2 float y2 float c1
float c2 float lw;
#N canvas 173 23 388 792 10;
#N canvas 0 22 223 200 \$0-scope 0;
#X scalar 8426-t-scope 0.75 0.75 1 1 91 0 1 \;;
#X scalar 8424-t-scope 0.75 0.5 1 0.75 91 0 1 \;;
#X scalar 8422-t-scope 0.75 0.25 1 0.5 91 0 1 \;;
#X scalar 8420-t-scope 0.75 0 1 0.25 91 0 1 \;;
#X scalar 8418-t-scope 0.5 0.75 0.75 1 91 0 1 \;;
#X scalar 8416-t-scope 0.5 0.5 0.75 0.75 91 0 1 \;;
#X scalar 8414-t-scope 0.5 0.25 0.75 0.5 91 0 1 \;;
#X scalar 8412-t-scope 0.5 0 0.75 0.25 91 0 1 \;;
#X scalar 8410-t-scope 0.25 0.75 0.5 1 91 0 1 \;;
#X scalar 8408-t-scope 0.25 0.5 0.5 0.75 91 0 1 \;;
#X scalar 8406-t-scope 0.25 0.25 0.5 0.5 91 0 1 \;;
#X scalar 8404-t-scope 0.25 0 0.5 0.25 91 0 1 \;;
#X scalar 8402-t-scope 0 0.75 0.25 1 91 0 1 \;;
#X scalar 8400-t-scope 0 0.5 0.25 0.75 91 0 1 \;;
#X scalar 8398-t-scope 0 0.25 0.25 0.5 91 0 1 \;;
#X scalar 8396-t-scope 0 0 0.25 0.25 91 0 1 \;;
#X coords 0 0 1 1 116 112 2 100 100;
#X restore 67 432 pd \$0-scope;
#X obj 14 562 spam~ 16 mat.2d.scope~ 4 4 \$0-scope, f 38;
#X obj 148 372 mat.gnbx2;
#X obj 148 326 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#N canvas 0 22 573 343 trajectory 0;
#X obj 54 191 t f f, f 15;
#X obj 54 279 pack f f, f 15;
#X obj 54 237 * 6.28319;
#X obj 141 237 * 6.28319;
#X obj 54 128 line 0;
#X obj 54 257 sin;
#X obj 141 257 sin;
#X obj 54 215 * 3;
#X obj 141 215 * 1;
#X msg 54 104 \$1 \, 1 10000;
#X obj 54 80 f 0;
#X obj 144 96 sel 1;
#X obj 54 301 outlet;
#X msg 17 104 stop;
#X obj 17 53 sel 0 1, f 13;
#X obj 144 118 f 0;
#X obj 17 25 inlet;
#X connect 0 0 7 0;
#X connect 0 1 8 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 3 0 6 0;
#X connect 4 0 0 0;
#X connect 4 0 11 0;
#X connect 5 0 1 0;
#X connect 6 0 1 1;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X connect 9 0 4 0;
#X connect 10 0 9 0;
#X connect 11 0 15 0;
#X connect 11 1 10 1;
#X connect 13 0 4 0;
#X connect 14 0 13 0;
#X connect 14 1 10 0;
#X connect 15 0 10 0;
#X connect 16 0 14 0;
#X restore 148 347 pd trajectory;
#X obj 258 682 vu 12 80 empty empty -1 -8 0 10 -66577 -1 1 0;
#X obj 15 682 vu 12 80 empty empty -1 -8 0 10 -66577 -1 1 0;
#X obj 14 639 env~;
#X obj 14 661 - 100;
#X obj 257 639 env~;
#X obj 257 661 - 100;
#X obj 14 247 noise~;
#X obj 14 617 dac~, f 41;
#X obj 14 407 spam~ 16 mat.2d.encoder~ 4 4, f 38;
#X obj 14 597 spam~ 16 mat.2d.decoder.dbap~ 4 4 2, f 41;
#X msg 257 543 positions -0.75 0.75 0.75 0.75, f 11;
#X obj 257 521 loadbang;
#X obj 29 270 osc~ 3;
#X obj 29 292 *~;
#X obj 14 315 *~;
#X obj 77 312 dbtorms;
#X obj 77 292 nbx 5 14 0 100 0 0 empty empty empty 0 -8 0 10 -262144
-1 -1 90 256;
#X obj 77 334 pack f 20;
#X obj 77 356 line~;
#X obj 14 379 *~, f 11;
#X obj 77 247 loadbang;
#X msg 77 269 90;
#N canvas 443 106 450 300 header 0;
#X obj 3 3 cnv 18 18 18 empty empty mat.2d.encoder~ 2 8 0 14 -262144
-66577 0;
#X text 215 4 by Pierre Guillot - 2016;
#X coords 0 -1 1 1 365 20 2 2 2;
#X restore 6 6 pd header;
#X text 4 31 The abstraction encodes a signal into a matrix depending
on cartesian coordinates. The weight of the signal in each cell is
computed using the distance between the encoding position and the cell
position. To allow an adaptation of the encoding to all the sizes of
matrices \, the coordinates are scaled between -1 and 1 The weight
of the signal decreases with the distance and when the distance reaches
its maximum the weight is null. To sound a bit more natural \, the
weight is transposed on a cosinus scaled. By default \, the distance
is limited in order to never exceed the distance between two cells.
Thus the signal can't be inside of more than five cells. Nevertheless
\, a blur factor allows to stretch the limit and to spread the signal
over a larger set of cells.;
#X text 4 209 The arguments expected by the abstraction are the number
of rows \, the number of columns., f 60;
#X text 142 245 Uses a list of two float to set the abscissa and the
ordinate position of encoding., f 37;
#X text 142 290 Uses the blur message with a float value to spread
the signal., f 37;
#X obj 239 323 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#N canvas 0 22 240 385 blurry 0;
#X obj 54 187 * 6.28319;
#X obj 54 128 line 0;
#X obj 54 207 sin;
#X obj 54 80 f 0;
#X obj 144 96 sel 1;
#X obj 54 321 outlet;
#X msg 17 104 stop;
#X obj 17 53 sel 0 1, f 13;
#X obj 144 118 f 0;
#X obj 17 25 inlet;
#X obj 54 229 t f f;
#X obj 54 251 *, f 5;
#X obj 54 273 * 3;
#X obj 54 295 + 1;
#X msg 54 104 \$1 \, 1 50000;
#X connect 0 0 2 0;
#X connect 1 0 4 0;
#X connect 1 0 0 0;
#X connect 2 0 10 0;
#X connect 3 0 14 0;
#X connect 4 0 8 0;
#X connect 4 1 3 1;
#X connect 6 0 1 0;
#X connect 7 0 6 0;
#X connect 7 1 3 0;
#X connect 8 0 3 0;
#X connect 9 0 7 0;
#X connect 10 0 11 0;
#X connect 10 1 11 1;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 13 0 5 0;
#X connect 14 0 1 0;
#X restore 239 347 pd blurry;
#X obj 239 369 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X connect 2 0 13 1;
#X connect 3 0 4 0;
#X connect 4 0 2 0;
#X connect 7 0 8 0;
#X connect 8 0 6 0;
#X connect 9 0 10 0;
#X connect 10 0 5 0;
#X connect 11 0 19 0;
#X connect 13 0 1 0;
#X connect 13 0 14 0;
#X connect 13 1 1 1;
#X connect 13 1 14 1;
#X connect 13 2 1 2;
#X connect 13 2 14 2;
#X connect 13 3 1 3;
#X connect 13 3 14 3;
#X connect 13 4 1 4;
#X connect 13 4 14 4;
#X connect 13 5 1 5;
#X connect 13 5 14 5;
#X connect 13 6 1 6;
#X connect 13 6 14 6;
#X connect 13 7 1 7;
#X connect 13 7 14 7;
#X connect 13 8 1 8;
#X connect 13 8 14 8;
#X connect 13 9 1 9;
#X connect 13 9 14 9;
#X connect 13 10 1 10;
#X connect 13 10 14 10;
#X connect 13 11 1 11;
#X connect 13 11 14 11;
#X connect 13 12 1 12;
#X connect 13 12 14 12;
#X connect 13 13 1 13;
#X connect 13 13 14 13;
#X connect 13 14 1 14;
#X connect 13 14 14 14;
#X connect 13 15 1 15;
#X connect 13 15 14 15;
#X connect 14 0 7 0;
#X connect 14 0 12 0;
#X connect 14 1 9 0;
#X connect 14 1 12 1;
#X connect 15 0 14 16;
#X connect 16 0 15 0;
#X connect 17 0 18 0;
#X connect 17 0 18 1;
#X connect 18 0 19 1;
#X connect 19 0 24 0;
#X connect 20 0 22 0;
#X connect 21 0 20 0;
#X connect 22 0 23 0;
#X connect 23 0 24 1;
#X connect 24 0 13 0;
#X connect 25 0 26 0;
#X connect 26 0 21 0;
#X connect 32 0 33 0;
#X connect 33 0 34 0;
#X connect 34 0 13 1;
